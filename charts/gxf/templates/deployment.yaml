apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ .Release.Name }}
    {{- with .Values.labels}}
    {{- toYaml . | nindent 4 }}
    {{- end}}
spec:
  replicas: {{ .Values.replicas}}
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  strategy:
    type: RollingUpdate
  template:
    metadata:
      name: {{ .Release.Name }}
      labels:
        app: {{ .Release.Name }}
        {{- with .Values.labels}}
        {{- toYaml . | nindent 8 }}
        {{- end}}
      annotations:
        prometheus.io/port: '9404'
        prometheus.io/scrape: 'true'
        {{- with .Values.annotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ .Values.serviceAccountName }}
      {{- if .Values.imagePullSecret }}
      imagePullSecrets:
        - {{ .Values.imagePullSecret }}
      {{- end }}
      {{- if .Values.initContainers }}
      initContainers: {{- toYaml .Values.initContainers | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ .Release.Name }}
        image: {{ .Values.imageRepo }}{{ .Values.image }}:{{ .Values.imageTag }}
        resources: {{- toYaml .Values.resources | nindent 10 }}
        imagePullPolicy: {{ .Values.imagePullPolicy }}
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: APP_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app']
        {{- range $key, $value := .Values.extraEnv }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        {{- range $key, $value := .Values.envFromSecrets }}
        - name: {{ $key }}
          valueFrom:
            secretKeyRef:
              name: {{ $value.secretName }}
              key: {{ $value.secretKey }}
        {{- end }}
        ports:
        {{- if .Values.httpdSidecar.enabled }}
          - containerPort: 8009
            name: ajp
            protocol: TCP
        {{- end }}
        {{- if or (not .Values.httpdSidecar.enabled) (.Values.httpdSidecar.tomcatHttpEnabled) }}
          - containerPort: 8080
            name: http
            protocol: TCP
        {{- end }}
        {{- range .Values.extraPorts }}
          - containerPort: {{ .port }}
            name: {{ .name }}
            protocol: {{ .protocol | default "TCP" }}
        {{- end }}
        volumeMounts:
        - name: osgp-config
          mountPath: /etc/osgp
        - name: osgp-config
          mountPath: /etc/osp
        - name: tomcat-config
          mountPath: /usr/local/tomcat/conf/server.xml
          subPath: server.xml
        - name: tomcat-config
          mountPath: /usr/local/tomcat/conf/context.xml
          subPath: context.xml
        {{- if .Values.extraVolumeMounts }}
        {{- toYaml .Values.extraVolumeMounts | nindent 8 }}
        {{- end }}
        startupProbe: {{- toYaml .Values.startupProbe | nindent 10 }}
        livenessProbe: {{- toYaml .Values.livenessProbe | nindent 10 }}
        readinessProbe: {{- toYaml .Values.readinessProbe | nindent 10 }}
      {{- if .Values.httpdSidecar.enabled }}
      - name: httpd
        image: {{ .Values.httpdSidecar.imageRepo }}{{ .Values.httpdSidecar.image }}:{{ .Values.httpdSidecar.imageTag }}
        {{- if .Values.httpdSidecar.resources }}
        resources: {{- toYaml .Values.httpdSidecar.resources | nindent 10 }}
        {{- end }}
        ports:
        - name: https
          containerPort: {{ .Values.httpdSidecar.port }}
          protocol: TCP
        volumeMounts:
        - name: apache-config
          mountPath: /usr/local/apache2/conf/httpd.conf
          subPath: httpd.conf
        - name: apache-config
          mountPath: /usr/local/apache2/conf/extra/vhosts.conf
          subPath: vhosts.conf
        - name: apache-server-certs
          mountPath: /certs
        {{- if .Values.httpdSidecar.extraVolumeMounts }}
        {{- toYaml .Values.httpdSidecar.extraVolumeMounts | nindent 8 }}
        {{- end }}
        readinessProbe:
          httpGet:
            path: /server-status
            port: https
            scheme: HTTPS
          initialDelaySeconds: 5
          periodSeconds: 10
      {{- end }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ .Release.Name }}
              topologyKey: kubernetes.io/hostname
      volumes:
      - name: osgp-config
        configMap:
          name: {{ .Release.Name }}
      - name: tomcat-config
        configMap:
          name: {{ .Release.Name }}-tomcat
      {{- if .Values.httpdSidecar.enabled }}
      - name: apache-config
        configMap:
          name: {{ .Release.Name }}-apache
      - name: apache-server-certs
        secret:
          secretName: {{ .Release.Name }}.apache-server-certs
          defaultMode: 0555
      {{- end }}
      {{- if .Values.extraVolumes }}
      {{- if eq (typeOf .Values.extraVolumes) "[]interface {}"}}
      {{- toYaml .Values.extraVolumes | nindent 6 }}
      {{- else if eq (typeOf .Values.extraVolumes) "string" }}
      {{- with .Values.extraVolumes }}
      {{- tpl . $ | nindent 6 }}
      {{- end }}
      {{- end}}
      {{- end }}
      terminationGracePeriodSeconds: 60
      enableServiceLinks: false
